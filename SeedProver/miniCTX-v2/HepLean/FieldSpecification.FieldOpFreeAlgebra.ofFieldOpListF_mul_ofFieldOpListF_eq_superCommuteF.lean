-- In HepLean/HepLean/PerturbationTheory/FieldOpFreeAlgebra/SuperCommute.lean

/-
Copyright (c) 2025 Joseph Tooby-Smith. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Joseph Tooby-Smith
-/
import HepLean.PerturbationTheory.FieldOpFreeAlgebra.Basic
import HepLean.PerturbationTheory.FieldOpFreeAlgebra.Grading
/-!

# Super Commute
-/

namespace FieldSpecification
variable {ùìï : FieldSpecification}

namespace FieldOpFreeAlgebra

/-!

## The super commutator on the FieldOpFreeAlgebra.

-/

open FieldStatistic

/-- For a field specification `ùìï`, the super commutator `superCommuteF` is defined as the linear
  map `ùìï.FieldOpFreeAlgebra ‚Üí‚Çó[‚ÑÇ] ùìï.FieldOpFreeAlgebra ‚Üí‚Çó[‚ÑÇ] ùìï.FieldOpFreeAlgebra`
  which on the lists `œÜs` and `œÜs'` of `ùìï.CrAnFieldOp` gives

  `superCommuteF œÜs œÜs' = œÜs * œÜs' - ùì¢(œÜs, œÜs') ‚Ä¢ œÜs' * œÜs`.

  The notation `[a, b]‚Çõca` can be used for `superCommuteF a b`. -/
noncomputable def superCommuteF : ùìï.FieldOpFreeAlgebra ‚Üí‚Çó[‚ÑÇ] ùìï.FieldOpFreeAlgebra ‚Üí‚Çó[‚ÑÇ]
    ùìï.FieldOpFreeAlgebra :=
  Basis.constr ofCrAnListFBasis ‚ÑÇ fun œÜs =>
  Basis.constr ofCrAnListFBasis ‚ÑÇ fun œÜs' =>
  ofCrAnListF (œÜs ++ œÜs') - ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜs') ‚Ä¢ ofCrAnListF (œÜs' ++ œÜs)

@[inherit_doc superCommuteF]
scoped[FieldSpecification.FieldOpFreeAlgebra] notation "[" œÜs "," œÜs' "]‚Çõca" => superCommuteF œÜs œÜs'

/-!

## The super commutator of different types of elements

-/

lemma superCommuteF_ofCrAnListF_ofCrAnListF (œÜs œÜs' : List ùìï.CrAnFieldOp) :
    [ofCrAnListF œÜs, ofCrAnListF œÜs']‚Çõca =
    ofCrAnListF (œÜs ++ œÜs') - ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜs') ‚Ä¢ ofCrAnListF (œÜs' ++ œÜs) := by
  rw [‚Üê ofListBasis_eq_ofList, ‚Üê ofListBasis_eq_ofList]
  simp only [superCommuteF, Basis.constr_basis]

lemma superCommuteF_ofCrAnOpF_ofCrAnOpF (œÜ œÜ' : ùìï.CrAnFieldOp) :
    [ofCrAnOpF œÜ, ofCrAnOpF œÜ']‚Çõca =
    ofCrAnOpF œÜ * ofCrAnOpF œÜ' - ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢ ofCrAnOpF œÜ' * ofCrAnOpF œÜ := by
  rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton]
  rw [superCommuteF_ofCrAnListF_ofCrAnListF, ofCrAnListF_append]
  congr
  rw [ofCrAnListF_append]
  rw [FieldStatistic.ofList_singleton, FieldStatistic.ofList_singleton, smul_mul_assoc]

lemma superCommuteF_ofCrAnListF_ofFieldOpFsList (œÜcas : List ùìï.CrAnFieldOp) (œÜs : List ùìï.FieldOp) :
    [ofCrAnListF œÜcas, ofFieldOpListF œÜs]‚Çõca = ofCrAnListF œÜcas * ofFieldOpListF œÜs -
    ùì¢(ùìï |>‚Çõ œÜcas, ùìï |>‚Çõ œÜs) ‚Ä¢ ofFieldOpListF œÜs * ofCrAnListF œÜcas := by
  conv_lhs => rw [ofFieldOpListF_sum]
  rw [map_sum]
  conv_lhs =>
    enter [2, x]
    rw [superCommuteF_ofCrAnListF_ofCrAnListF, CrAnSection.statistics_eq_state_statistics,
      ofCrAnListF_append, ofCrAnListF_append]
  rw [Finset.sum_sub_distrib, ‚Üê Finset.mul_sum, ‚Üê Finset.smul_sum,
    ‚Üê Finset.sum_mul, ‚Üê ofFieldOpListF_sum]
  simp

lemma superCommuteF_ofFieldOpListF_ofFieldOpFsList (œÜ : List ùìï.FieldOp) (œÜs : List ùìï.FieldOp) :
    [ofFieldOpListF œÜ, ofFieldOpListF œÜs]‚Çõca = ofFieldOpListF œÜ * ofFieldOpListF œÜs -
    ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜs) ‚Ä¢ ofFieldOpListF œÜs * ofFieldOpListF œÜ := by
  conv_lhs => rw [ofFieldOpListF_sum]
  simp only [map_sum, LinearMap.coeFn_sum, Finset.sum_apply, instCommGroup.eq_1,
    Algebra.smul_mul_assoc]
  conv_lhs =>
    enter [2, x]
    rw [superCommuteF_ofCrAnListF_ofFieldOpFsList]
  simp only [instCommGroup.eq_1, CrAnSection.statistics_eq_state_statistics,
    Algebra.smul_mul_assoc, Finset.sum_sub_distrib]
  rw [‚Üê Finset.sum_mul, ‚Üê Finset.smul_sum, ‚Üê Finset.mul_sum, ‚Üê ofFieldOpListF_sum]

lemma superCommuteF_ofFieldOpF_ofFieldOpFsList (œÜ : ùìï.FieldOp) (œÜs : List ùìï.FieldOp) :
    [ofFieldOpF œÜ, ofFieldOpListF œÜs]‚Çõca = ofFieldOpF œÜ * ofFieldOpListF œÜs -
    ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜs) ‚Ä¢ ofFieldOpListF œÜs * ofFieldOpF œÜ := by
  rw [‚Üê ofFieldOpListF_singleton, superCommuteF_ofFieldOpListF_ofFieldOpFsList,
    ofFieldOpListF_singleton]
  simp

lemma superCommuteF_ofFieldOpListF_ofFieldOpF (œÜs : List ùìï.FieldOp) (œÜ : ùìï.FieldOp) :
    [ofFieldOpListF œÜs, ofFieldOpF œÜ]‚Çõca = ofFieldOpListF œÜs * ofFieldOpF œÜ -
    ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜ) ‚Ä¢ ofFieldOpF œÜ * ofFieldOpListF œÜs := by
  rw [‚Üê ofFieldOpListF_singleton, superCommuteF_ofFieldOpListF_ofFieldOpFsList,
    ofFieldOpListF_singleton]
  simp

lemma superCommuteF_anPartF_crPartF (œÜ œÜ' : ùìï.FieldOp) :
    [anPartF œÜ, crPartF œÜ']‚Çõca = anPartF œÜ * crPartF œÜ' -
    ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢ crPartF œÜ' * anPartF œÜ := by
  match œÜ, œÜ' with
  | FieldOp.inAsymp œÜ, _ =>
    simp
  | _, FieldOp.outAsymp œÜ =>
    simp only [crPartF_posAsymp, map_zero, mul_zero, instCommGroup.eq_1, smul_zero, zero_mul,
      sub_self]
  | FieldOp.position œÜ, FieldOp.position œÜ' =>
    simp only [anPartF_position, crPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
    simp [crAnStatistics, ‚Üê ofCrAnListF_append]
  | FieldOp.outAsymp œÜ, FieldOp.position œÜ' =>
    simp only [anPartF_posAsymp, crPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
    simp [crAnStatistics, ‚Üê ofCrAnListF_append]
  | FieldOp.position œÜ, FieldOp.inAsymp œÜ' =>
    simp only [anPartF_position, crPartF_negAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
    simp only [List.singleton_append, instCommGroup.eq_1, crAnStatistics,
      FieldStatistic.ofList_singleton, Function.comp_apply, crAnFieldOpToFieldOp_prod, ‚Üê
      ofCrAnListF_append]
  | FieldOp.outAsymp œÜ, FieldOp.inAsymp œÜ' =>
    simp only [anPartF_posAsymp, crPartF_negAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
    simp [crAnStatistics, ‚Üê ofCrAnListF_append]

lemma superCommuteF_crPartF_anPartF (œÜ œÜ' : ùìï.FieldOp) :
    [crPartF œÜ, anPartF œÜ']‚Çõca = crPartF œÜ * anPartF œÜ' -
    ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢ anPartF œÜ' * crPartF œÜ := by
    match œÜ, œÜ' with
    | FieldOp.outAsymp œÜ, _ =>
    simp only [crPartF_posAsymp, map_zero, LinearMap.zero_apply, zero_mul, instCommGroup.eq_1,
      mul_zero, sub_self]
    | _, FieldOp.inAsymp œÜ =>
    simp only [anPartF_negAsymp, map_zero, mul_zero, instCommGroup.eq_1, smul_zero, zero_mul,
      sub_self]
    | FieldOp.position œÜ, FieldOp.position œÜ' =>
    simp only [crPartF_position, anPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
    simp [crAnStatistics, ‚Üê ofCrAnListF_append]
    | FieldOp.position œÜ, FieldOp.outAsymp œÜ' =>
    simp only [crPartF_position, anPartF_posAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
    simp [crAnStatistics, ‚Üê ofCrAnListF_append]
    | FieldOp.inAsymp œÜ, FieldOp.position œÜ' =>
    simp only [crPartF_negAsymp, anPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
    simp [crAnStatistics, ‚Üê ofCrAnListF_append]
    | FieldOp.inAsymp œÜ, FieldOp.outAsymp œÜ' =>
    simp only [crPartF_negAsymp, anPartF_posAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
    simp [crAnStatistics, ‚Üê ofCrAnListF_append]

lemma superCommuteF_crPartF_crPartF (œÜ œÜ' : ùìï.FieldOp) :
    [crPartF œÜ, crPartF œÜ']‚Çõca = crPartF œÜ * crPartF œÜ' -
    ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢ crPartF œÜ' * crPartF œÜ := by
  match œÜ, œÜ' with
  | FieldOp.outAsymp œÜ, _ =>
  simp only [crPartF_posAsymp, map_zero, LinearMap.zero_apply, zero_mul, instCommGroup.eq_1,
    mul_zero, sub_self]
  | _, FieldOp.outAsymp œÜ =>
  simp only [crPartF_posAsymp, map_zero, mul_zero, instCommGroup.eq_1, smul_zero, zero_mul,
    sub_self]
  | FieldOp.position œÜ, FieldOp.position œÜ' =>
  simp only [crPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
  rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
  simp [crAnStatistics, ‚Üê ofCrAnListF_append]
  | FieldOp.position œÜ, FieldOp.inAsymp œÜ' =>
  simp only [crPartF_position, crPartF_negAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
  rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
  simp [crAnStatistics, ‚Üê ofCrAnListF_append]
  | FieldOp.inAsymp œÜ, FieldOp.position œÜ' =>
  simp only [crPartF_negAsymp, crPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
  rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
  simp [crAnStatistics, ‚Üê ofCrAnListF_append]
  | FieldOp.inAsymp œÜ, FieldOp.inAsymp œÜ' =>
  simp only [crPartF_negAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
  rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
  simp [crAnStatistics, ‚Üê ofCrAnListF_append]

lemma superCommuteF_anPartF_anPartF (œÜ œÜ' : ùìï.FieldOp) :
    [anPartF œÜ, anPartF œÜ']‚Çõca =
    anPartF œÜ * anPartF œÜ' - ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢ anPartF œÜ' * anPartF œÜ := by
  match œÜ, œÜ' with
  | FieldOp.inAsymp œÜ, _ =>
    simp
  | _, FieldOp.inAsymp œÜ =>
    simp
  | FieldOp.position œÜ, FieldOp.position œÜ' =>
    simp only [anPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
    simp [crAnStatistics, ‚Üê ofCrAnListF_append]
  | FieldOp.position œÜ, FieldOp.outAsymp œÜ' =>
    simp only [anPartF_position, anPartF_posAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
    simp [crAnStatistics, ‚Üê ofCrAnListF_append]
  | FieldOp.outAsymp œÜ, FieldOp.position œÜ' =>
    simp only [anPartF_posAsymp, anPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
    simp [crAnStatistics, ‚Üê ofCrAnListF_append]
  | FieldOp.outAsymp œÜ, FieldOp.outAsymp œÜ' =>
    simp only [anPartF_posAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
    simp [crAnStatistics, ‚Üê ofCrAnListF_append]

lemma superCommuteF_crPartF_ofFieldOpListF (œÜ : ùìï.FieldOp) (œÜs : List ùìï.FieldOp) :
    [crPartF œÜ, ofFieldOpListF œÜs]‚Çõca =
    crPartF œÜ * ofFieldOpListF œÜs - ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜs) ‚Ä¢ ofFieldOpListF œÜs *
    crPartF œÜ := by
  match œÜ with
  | FieldOp.inAsymp œÜ =>
    simp only [crPartF_negAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofFieldOpFsList]
    simp [crAnStatistics]
  | FieldOp.position œÜ =>
    simp only [crPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofFieldOpFsList]
    simp [crAnStatistics]
  | FieldOp.outAsymp œÜ =>
    simp

lemma superCommuteF_anPartF_ofFieldOpListF (œÜ : ùìï.FieldOp) (œÜs : List ùìï.FieldOp) :
    [anPartF œÜ, ofFieldOpListF œÜs]‚Çõca =
    anPartF œÜ * ofFieldOpListF œÜs - ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜs) ‚Ä¢
    ofFieldOpListF œÜs * anPartF œÜ := by
  match œÜ with
  | FieldOp.inAsymp œÜ =>
    simp
  | FieldOp.position œÜ =>
    simp only [anPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofFieldOpFsList]
    simp [crAnStatistics]
  | FieldOp.outAsymp œÜ =>
    simp only [anPartF_posAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofFieldOpFsList]
    simp [crAnStatistics]

lemma superCommuteF_crPartF_ofFieldOpF (œÜ œÜ' : ùìï.FieldOp) :
    [crPartF œÜ, ofFieldOpF œÜ']‚Çõca =
    crPartF œÜ * ofFieldOpF œÜ' -
    ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢ ofFieldOpF œÜ' * crPartF œÜ := by
  rw [‚Üê ofFieldOpListF_singleton, superCommuteF_crPartF_ofFieldOpListF]
  simp

lemma superCommuteF_anPartF_ofFieldOpF (œÜ œÜ' : ùìï.FieldOp) :
    [anPartF œÜ, ofFieldOpF œÜ']‚Çõca =
    anPartF œÜ * ofFieldOpF œÜ' -
    ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢ ofFieldOpF œÜ' * anPartF œÜ := by
  rw [‚Üê ofFieldOpListF_singleton, superCommuteF_anPartF_ofFieldOpListF]
  simp

/-!

## Mul equal superCommuteF

Lemmas which rewrite a multiplication of two elements of the algebra as their commuted
multiplication with a sign plus the super commutator.

-/
lemma ofCrAnListF_mul_ofCrAnListF_eq_superCommuteF (œÜs œÜs' : List ùìï.CrAnFieldOp) :
    ofCrAnListF œÜs * ofCrAnListF œÜs' = ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜs') ‚Ä¢ ofCrAnListF œÜs' * ofCrAnListF œÜs
    + [ofCrAnListF œÜs, ofCrAnListF œÜs']‚Çõca := by
  rw [superCommuteF_ofCrAnListF_ofCrAnListF]
  simp [ofCrAnListF_append]

lemma ofCrAnOpF_mul_ofCrAnListF_eq_superCommuteF (œÜ : ùìï.CrAnFieldOp) (œÜs' : List ùìï.CrAnFieldOp) :
    ofCrAnOpF œÜ * ofCrAnListF œÜs' = ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜs') ‚Ä¢ ofCrAnListF œÜs' * ofCrAnOpF œÜ
    + [ofCrAnOpF œÜ, ofCrAnListF œÜs']‚Çõca := by
  rw [‚Üê ofCrAnListF_singleton, ofCrAnListF_mul_ofCrAnListF_eq_superCommuteF]
  simp

/- Start of proof attempt -/
lemma round1_ofFieldOpListF_mul_ofFieldOpListF_eq_superCommuteF (œÜs œÜs' : List ùìï.FieldOp) :
    ofFieldOpListF œÜs * ofFieldOpListF œÜs' =
    ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜs') ‚Ä¢ ofFieldOpListF œÜs' * ofFieldOpListF œÜs
    + [ofFieldOpListF œÜs, ofFieldOpListF œÜs']‚Çõca  := by
  have h1 := superCommuteF_ofFieldOpListF_ofFieldOpFsList œÜs œÜs'
  simp [h1]
  <;> ring

theorem ofFieldOpListF_mul_ofFieldOpListF_eq_superCommuteF (œÜs œÜs' : List ùìï.FieldOp) :
    ofFieldOpListF œÜs * ofFieldOpListF œÜs' =
    ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜs') ‚Ä¢ ofFieldOpListF œÜs' * ofFieldOpListF œÜs
    + [ofFieldOpListF œÜs, ofFieldOpListF œÜs']‚Çõca  := by

  exact round1_ofFieldOpListF_mul_ofFieldOpListF_eq_superCommuteF œÜs œÜs'
