-- In carleson/Carleson/ToMathlib/WeakType.lean

import Mathlib.MeasureTheory.Integral.MeanInequalities
import Mathlib.MeasureTheory.Integral.Layercake
import Mathlib.MeasureTheory.Integral.Lebesgue
import Mathlib.MeasureTheory.Measure.Lebesgue.EqHaar
import Mathlib.Analysis.SpecialFunctions.Pow.Integral
import Carleson.ToMathlib.ENorm
import Carleson.ToMathlib.Misc

noncomputable section

open NNReal ENNReal NormedSpace MeasureTheory Set Filter Topology Function

section move

variable {Œ± ùïú E : Type*} {m : MeasurableSpace Œ±}
  {Œº : Measure Œ±} [NontriviallyNormedField ùïú]
  [NormedAddCommGroup E] [NormedSpace ùïú E]
  {p : ‚Ñù‚â•0‚àû}

-- todo: move/rename/and perhaps reformulate in terms of ‚Äñ.‚Äñ‚Çë
lemma ENNNorm_absolute_homogeneous {c : ùïú} (z : E) : ofNNReal ‚Äñc ‚Ä¢ z‚Äñ‚Çä = ‚Üë‚Äñc‚Äñ‚Çä * ‚Üë‚Äñz‚Äñ‚Çä :=
  (toReal_eq_toReal_iff' coe_ne_top coe_ne_top).mp (norm_smul c z)

lemma ENNNorm_add_le (y z : E) : ofNNReal ‚Äñy + z‚Äñ‚Çä ‚â§ ‚Üë‚Äñy‚Äñ‚Çä + ‚Üë‚Äñz‚Äñ‚Çä :=
  (toReal_le_toReal coe_ne_top coe_ne_top).mp (nnnorm_add_le ..)

lemma measure_mono_ae' {A B : Set Œ±} (h : Œº (B \ A) = 0) :
    Œº B ‚â§ Œº A := by
  apply measure_mono_ae
  change Œº {x | ¬¨ B x ‚â§ A x} = 0
  simp only [le_Prop_eq, Classical.not_imp]
  exact h

lemma eLpNormEssSup_toReal_le {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} :
    eLpNormEssSup (ENNReal.toReal ‚àò f) Œº ‚â§ eLpNormEssSup f Œº := by
  simp_rw [eLpNormEssSup, enorm_eq_self]
  apply essSup_mono_ae
  apply Eventually.of_forall
  simp [implies_true]

/- Start of proof attempt -/
lemma round1_h2 (f : Œ± ‚Üí ‚Ñù‚â•0‚àû) :
    eLpNormEssSup f Œº = essSup f Œº := by
  have h21 : ‚àÄ x : Œ±, ‚Äñf x‚Äñ‚Çë = f x := by
    intro x
    simp
  have h22 : (fun x : Œ± => ‚Äñf x‚Äñ‚Çë) = f := by
    funext x
    exact h21 x
  have h23 : essSup (fun x => ‚Äñf x‚Äñ‚Çë) Œº = essSup f Œº := by
    rw [h22]
  have h24 : eLpNormEssSup f Œº = essSup (fun x => ‚Äñf x‚Äñ‚Çë) Œº := by
    simp [eLpNormEssSup]
  rw [h24]
  exact h23

lemma round1_h3 (f : Œ± ‚Üí ‚Ñù‚â•0‚àû) (hf : ‚àÄ·µê x ‚àÇŒº, f x ‚â† ‚àû) :
    eLpNormEssSup (ENNReal.toReal ‚àò f) Œº = essSup f Œº := by
  have h31 : eLpNormEssSup (ENNReal.toReal ‚àò f) Œº = essSup (fun x => ‚Äñ(ENNReal.toReal ‚àò f) x‚Äñ‚Çë) Œº := by
    simp [eLpNormEssSup]
  have h32 : ‚àÄ·µê x ‚àÇŒº, ‚Äñ(ENNReal.toReal ‚àò f) x‚Äñ‚Çë = f x := by
    filter_upwards [hf] with x hx
    have h321 : ‚Äñ(f x).toReal‚Äñ‚Çë = f x := by
      simp [ENNReal.ofReal_toReal, hx]
      <;> aesop
    simpa using h321
  have h33 : essSup (fun x => ‚Äñ(ENNReal.toReal ‚àò f) x‚Äñ‚Çë) Œº = essSup f Œº := by
    apply essSup_congr_ae
    filter_upwards [h32] with x hx
    <;> simp_all
  rw [h31]
  exact h33

theorem eLpNormEssSup_toReal_eq {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hf : ‚àÄ·µê x ‚àÇŒº, f x ‚â† ‚àû) :
    eLpNormEssSup (ENNReal.toReal ‚àò f) Œº = eLpNormEssSup f Œº  := by

  have h2 : eLpNormEssSup f Œº = essSup f Œº := by
    exact round1_h2 f
  have h3 : eLpNormEssSup (ENNReal.toReal ‚àò f) Œº = essSup f Œº := by
    exact round1_h3 f hf
  have h4 : eLpNormEssSup (ENNReal.toReal ‚àò f) Œº = essSup f Œº := h3
  have h5 : essSup f Œº = eLpNormEssSup f Œº := by
    rw [h2]
    <;> rfl
  rw [h4, h5]
