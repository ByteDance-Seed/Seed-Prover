-- In carleson/Carleson/ToMathlib/WeakType.lean

import Mathlib.MeasureTheory.Integral.MeanInequalities
import Mathlib.MeasureTheory.Integral.Layercake
import Mathlib.MeasureTheory.Integral.Lebesgue
import Mathlib.MeasureTheory.Measure.Lebesgue.EqHaar
import Mathlib.Analysis.SpecialFunctions.Pow.Integral
import Carleson.ToMathlib.ENorm
import Carleson.ToMathlib.Misc

noncomputable section

open NNReal ENNReal NormedSpace MeasureTheory Set Filter Topology Function

section move

variable {Œ± ùïú E : Type*} {m : MeasurableSpace Œ±}
  {Œº : Measure Œ±} [NontriviallyNormedField ùïú]
  [NormedAddCommGroup E] [NormedSpace ùïú E]
  {p : ‚Ñù‚â•0‚àû}

-- todo: move/rename/and perhaps reformulate in terms of ‚Äñ.‚Äñ‚Çë
lemma ENNNorm_absolute_homogeneous {c : ùïú} (z : E) : ofNNReal ‚Äñc ‚Ä¢ z‚Äñ‚Çä = ‚Üë‚Äñc‚Äñ‚Çä * ‚Üë‚Äñz‚Äñ‚Çä :=
  (toReal_eq_toReal_iff' coe_ne_top coe_ne_top).mp (norm_smul c z)

lemma ENNNorm_add_le (y z : E) : ofNNReal ‚Äñy + z‚Äñ‚Çä ‚â§ ‚Üë‚Äñy‚Äñ‚Çä + ‚Üë‚Äñz‚Äñ‚Çä :=
  (toReal_le_toReal coe_ne_top coe_ne_top).mp (nnnorm_add_le ..)

lemma measure_mono_ae' {A B : Set Œ±} (h : Œº (B \ A) = 0) :
    Œº B ‚â§ Œº A := by
  apply measure_mono_ae
  change Œº {x | ¬¨ B x ‚â§ A x} = 0
  simp only [le_Prop_eq, Classical.not_imp]
  exact h

lemma eLpNormEssSup_toReal_le {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} :
    eLpNormEssSup (ENNReal.toReal ‚àò f) Œº ‚â§ eLpNormEssSup f Œº := by
  simp_rw [eLpNormEssSup, enorm_eq_self]
  apply essSup_mono_ae
  apply Eventually.of_forall
  simp [implies_true]

lemma eLpNormEssSup_toReal_eq {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hf : ‚àÄ·µê x ‚àÇŒº, f x ‚â† ‚àû) :
    eLpNormEssSup (ENNReal.toReal ‚àò f) Œº = eLpNormEssSup f Œº := by
  simp_rw [eLpNormEssSup, enorm_eq_self]
  apply essSup_congr_ae
  filter_upwards [hf] with x hx
  simp [hx]

lemma eLpNorm'_toReal_le {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} {p : ‚Ñù} (hp : 0 ‚â§ p) :
    eLpNorm' (ENNReal.toReal ‚àò f) p Œº ‚â§ eLpNorm' f p Œº := by
  simp_rw [eLpNorm', enorm_eq_self]
  gcongr
  simp

lemma eLpNorm'_toReal_eq {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} {p : ‚Ñù} (hf : ‚àÄ·µê x ‚àÇŒº, f x ‚â† ‚àû) :
    eLpNorm' (ENNReal.toReal ‚àò f) p Œº = eLpNorm' f p Œº := by
  simp_rw [eLpNorm', enorm_eq_self]
  congr 1
  apply lintegral_congr_ae
  filter_upwards [hf] with x hx
  simp [hx]

/- Start of proof attempt -/
lemma round1_eLpNorm_toReal_le {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} :
    eLpNorm (ENNReal.toReal ‚àò f) p Œº ‚â§ eLpNorm f p Œº := by
  by_cases h : p = ‚àû
  ¬∑ -- Case 1: p = ‚àû
    rw [h]
    simpa using eLpNormEssSup_toReal_le
  ¬∑ -- Case 2: p ‚â† ‚àû
    have h1 : ‚àÉ (p' : ‚Ñù), 0 ‚â§ p' ‚àß p = ENNReal.ofReal p' := by
      have h2 : p ‚â† ‚àû := h
      have h3 : (p : ‚Ñù‚â•0‚àû) ‚â† ‚àû := by simpa using h2
      have h4 : ‚àÉ (r : ‚Ñù), 0 ‚â§ r ‚àß p = ENNReal.ofReal r := by
        refine' ‚ü®(p : ‚Ñù‚â•0‚àû).toReal, _‚ü©
        constructor
        ¬∑ -- Show 0 ‚â§ (p : ‚Ñù‚â•0‚àû).toReal
          positivity
        ¬∑ -- Show p = ENNReal.ofReal ((p : ‚Ñù‚â•0‚àû).toReal)
          have h5 : (p : ‚Ñù‚â•0‚àû) ‚â† ‚àû := h3
          have h6 : (p : ‚Ñù‚â•0‚àû).toReal ‚â• 0 := by positivity
          simp [ENNReal.ofReal_toReal, h5]
          <;> aesop
      obtain ‚ü®r, hr1, hr2‚ü© := h4
      refine' ‚ü®r, hr1, hr2‚ü©
    obtain ‚ü®p', hp1, hp2‚ü© := h1
    rw [hp2]
    simp only [eLpNorm]
    by_cases h5 : p' ‚â§ 0
    ¬∑ -- Case 2.1: p' ‚â§ 0
      have h6 : p' = 0 := by linarith
      simp [h6]
      <;> norm_num
    ¬∑ -- Case 2.2: ¬¨(p' ‚â§ 0)
      have h9 : ¬¨(p' ‚â§ 0) := h5
      simp [h9]
      have h12 : 0 ‚â§ p' := by linarith
      have h13 : eLpNorm' (ENNReal.toReal ‚àò f) p' Œº ‚â§ eLpNorm' f p' Œº := eLpNorm'_toReal_le h12
      have h14 : (ENNReal.ofReal p').toReal = p' := by
        rw [ENNReal.toReal_ofReal]
        linarith
      simp only [h14]
      exact h13

theorem eLpNorm_toReal_le {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} :
    eLpNorm (ENNReal.toReal ‚àò f) p Œº ‚â§ eLpNorm f p Œº  := by

  exact round1_eLpNorm_toReal_le
